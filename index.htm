<!DOCTYPE html>

<html>

<head>
        <link rel="stylesheet" type="text/css"  href="style.css" /> 
        <script src="jquery.js" type="text/javascript"></script>
        <script src="https://ajax.googleapis.com/ajax/libs/jquery/1.10.2/jquery.min.js"></script>
        <script src="https://ajax.aspnetcdn.com/ajax/jquery.validate/1.11.1/jquery.validate.min.js"></script>
        <script src="https://cdn.jsdelivr.net/jquery.validation/1.16.0/additional-methods.min.js"></script>
        <!-- $.noConflict(); -->
</head>

<body>

<div id="divMain">
    <header>
            <img src="pacman.png" id="pacman">
            Wrote by: Loren Tsahalon & Niv Dudovitch
            <h1 id="pacmanTitle" >Pacman</h1>
    </header>
    <nav>
        <ul>
            <li><a button="#welcome" onclick="ShowSection('welcome')">Welcome</a></li>
            <li><a button="#log-in" onclick="ShowSection('log-in')">Log-in</a></li>
            <li><a button="#sign-up" onclick="ShowSection('sign-up')">Sign-up</a></li>
            <li><a button="#about" onclick="ShowDialog()">About</a></li>
        </ul>
    </nav>

    <footer>
            <br>
            created: 05/05/2019 - This site contains the Pacman game in a special edition - ENJOY!
            <br>
            contact with the website developers:
            <br>
            loren: lorentsa@post.bgu.ac.il | niv: nivdu@post.bgu.ac.il
    </footer>
    
    <dialog id="about">
        <button onclick="CloseDialog()">X</button>
        <br>
        Niv Dudovitch
        <br>
        Loren Tsahalon
    </dialog>

    <div id="game" style="visibility: hidden;" class="screens">
        <table id="table">
            <tr>
                <td>
                    Player Name:
                </td>
                <td>
                    <input id="lblPlayerName" type="text" class = "lbls"/>
                </td>
                <td>
                    Remain Life:
                </td>
                <td>
                    <input id="lblRemainLife" type="text" class = "lbls"/>
                </td>
                <td>
                    <input type="button" value="new-game" onclick="new_game()">
                </td>
            </tr>
            <tr>
                <td>
                    Score:
                </td>
                <td>
                    <input id="lblScore" type="text" class = "lbls"/>
                </td>
                <td>
                    Time:
                </td>
                <td>
                    <input id="lblTime" type="text" class = "lbls"/>
                </td>
                <td>
                    <input type="button" value="faster_monsters" onclick="faster_monsters()">
                </td>

            </tr>
        </table>
        
        <canvas id="canvas" height="540" width="1200"></canvas>

    </div>

    <div id="welcome" style="visibility: visible;" class="screens">
        <input type="button" value="log-in" onclick="ShowSection('log-in')">
        <input type="button" value="sign-up" onclick="ShowSection('sign-up')">
        <br>
        <img src="play.png" high="200px" width="500px">
    </div>

    <div id="sign-up" style="visibility: hidden;" class="screens">
        <form id = "sign_up_form" method = "get" action = "">
        <h4>Username: </h4>
        <input id="uName" name="uName" type="text" class="check">
        <h4>Password: </h4>
        <input id="pass" name="pass" type="password" class="check">
        <h4>First Name: </h4>
        <input id="fName" name="fName" type="text" class="check">
        <h4>Last Name: </h4>
        <input id="lName" name="lName" type="text" class="check">
        <h4>Email: </h4>
        <input id="mail" name="mail" type = "email" placeholder = "name@domain.com" class="check"> 
        <h4>Birth Date: </h4>
        <input id="bdate" name="bdate" type="date" class="check">
        
        <input type="submit" value="Submit">
        </form>
    </div>

    <div id="log-in" style="visibility: hidden;" class="screens">
        <h1>Username: </h1>
        <br>
        <input id="username" type="text" value="a" onclick="document.getElementById('username').value=''" class = "lbls">
        <h1>Password: </h1>
        <br>
        <input id="passw" type="text" value="a" onclick="document.getElementById('passw').value=''" class = "lbls">
        <br>
        <br>

        <input type="button" value="sign-in" onclick="CheckSignIn(document.getElementById('username').value,
        document.getElementById('passw').value)">
    </div>

    <div id="setting" style="visibility: hidden;" class = "screens">
            
            <table id="Settingtable">
                    <tr>
                        <td>
                                <input type="button" value="set Up movement" onclick="c_up = updateUp()">
                        </td>
                        <td>
                                <input id="up-controll" type="text" class = "lblsSetting" value="choosen-key"/>
                        </td>
                    </tr>
                    <tr>
                        <td>
                                <input type="button" value="set Down movement" onclick="c_down = updateDown()">
                        </td>
                        <td>
                                <input id="down-controll" type="text" class = "lblsSetting" value="choosen-key"/>
                        </td>
                    </tr>
                    <tr>
                        <td>
                                <input type="button" value="set Right movement" onclick="c_right = updateRight()">
                        </td>
                        <td>
                                <input id="right-controll" type="text" class = "lblsSetting" value="choosen-key"/>
                        </td>                        
                        </tr>
                        <tr>
                        <td>
                                <input type="button" value="set Left movement" onclick="c_left = updateLeft()">
                        </td>
                        <td>
                                
                                <input id="left-controll" type="text" class = "lblsSetting" value="choosen-key"/>
                        </td>
                    </tr>
                    <tr>
                            <td>
                            <h4>Number of balls: (between 50 to 90) </h4>
                            </td>
                            <td>
                            <input id="num_of_balls" type="text" value="-None-" onclick="document.getElementById('num_of_balls').value=''" class = "lblsSetting">
                            </td>
                            <td>
                                    <h4>Color of 25 ball: </h4>
                                    <select name="list" id="colorList25" >
                                        <option value="red">red</option>
                                        <option value="blue">blue</option>
                                        <option value="black">black</option>
                                    </select>
                                    </td>
                                    <td>
                                    <h4>Color of 15 ball: </h4>
                                    <select name="list" id="colorList15">
                                        <option value="blue">blue</option>
                                        <option value="red">red</option>
                                        <option value="black">black</option>
                                    </select>
                                </td>
                                <td>
                                    <h4>Color of 5 ball: </h4>
                                    <select name="list" id="colorList5">
                                        <option value="black">black</option>
                                        <option value="blue">blue</option>
                                        <option value="red">red</option>
                                    </select>
                                    
                            </td>
                    </tr>
                    <tr>
                        <td>
                            <h4>Number of monsters: (1-3) </h4>
                        </td>
                        <td>
                            <input id="num_of_monsters" type="text" value="-None-" onclick="document.getElementById('num_of_monsters').value=''" class = "lblsSetting"> 
                        </td>
                        <td>
                            </tr>
                            <tr>
                            <td>
                            <h4>Game Time: </h4>
                        </td>
                        <td>
                            <input id="game_time" type="text" value="-None-" onclick="document.getElementById('game_time').value=''" class = "lblsSetting">
                        </td>
                    </tr>
                    <tr>
                        <td>
                                <input type="button" value="Random" onclick="random()">
                        </td>
                        <td>
                            <input type="button" value="Done" onclick="CheckSettings(document.getElementById('num_of_balls').value,//document.getElementById('move_up').value,document.getElementById('move_down').value,document.getElementById('move_right').value,document.getElementById('move_left').value,
                                        document.getElementById('colorList25').value,document.getElementById('colorList15').value,
                                        document.getElementById('colorList5').value,document.getElementById('game_time').value,document.getElementById('num_of_monsters').value)">
                        </td>
                    </tr>
                </table>
                    
            
        </div>
</div>

<script type="text/javascript">
    var context = canvas.getContext("2d");
    var shape = new Object();
    var activeMonsters;
    var board;
    var score;
    var move_direction;
    var ball_25;
    var ball_15;
    var ball_5;
    var c_up;
    var c_down;
    var c_right;
    var c_left;
    var gameTime;
    var gameTimeBonus=0;
    var number_of_eating;
    var number_of_eating1;
    var balls_number;
    var pac_color;
    var start_time;
    var time_elapsed;
    var interval;
    var interval_monsters;
    var users = new Array();
    var playSound;
    var winSound;
    var lostSound;
    var gameOver=true;//true when the game finished (timeElapsed\monsterKillU\Winning).
    var currUser;//represent the current log-in user.
    var remain_life=3;
    var number_Of_monsters;
    var count_of_monsters_fast=1000;
    var time_monster;
    var interval_time_monster;
    var MonsterHitSound;
    var timeOverSound;
    var bonus_monster;
    var interval_bonus_monster;  
    

    class User{
        constructor(username,password,fName,lName,email,bDate) {
            this.username = username;
            this.password = password;
            this.fName = fName;
            this.lName = lName;
            this.email = email;
            this.bDate = bDate;
        }
    }
    class sound{
        constructor(src) {
            this.sound = document.createElement("audio");
            this.sound.src = src;
            this.sound.setAttribute("preload", "auto");
            this.sound.setAttribute("controls", "none");
            this.sound.style.display = "none";
            document.body.appendChild(this.sound);
            this.play = function(){
                this.sound.play();
            }
            this.stop = function(){
                this.sound.pause();
            }
        }
    }

    $(document).ready(function(){
        users.push(new User('a','a','a','a','a@a.a','1.1.1991'));        
    })

    $(document).ready(function(){
    // validate signup form on keyup and submit
        $("#sign_up_form").validate({
            rules: {
                fName: { 
                    required:true,
                    checkOnlyLetters: true,
                },
                lName: {
                    required:true,
                    checkOnlyLetters: true,
                },
                uName: {
                    required: true,
                    isUserNotExists: true,
                },
                pass: {
                    required: true,
                    minlength: 8,
                    isLegalPass: true,
                },
                mail: {
                    required: true,
                    email: true
                },
                bdate: {
                    required: true,
                    minlength: 2,
                    //to-do check bdate
                },
            },
            messages: {
                fName: {
                    required: "Please enter your firstname",
                    checkOnlyLetters: "first name must include only letters",
                    },
                lName: {
                    required: "Please enter your lastname",
                    checkOnlyLetters: "last name must include only letters",
                },
                uName: {
                    required: "Please enter a username",
                    isUserNotExists: "this username already exists",
                },
                pass: {
                    required: "Please provide a password",
                    minlength: "Your password must be at least 8 characters long",
                    isLegalPass: "the password must include only letters and digits",
                },
                mail: {
                    required: "Please enter a valid email address2",
                    email: "Please enter a valid email address1",
                },
                bdate: {
                    required: "Please enter your birth date",
                    minlength: "Please enter your birth date",
                },
            },

            submitHandler : function(form) {
                AddUser(document.getElementById('uName').value,document.getElementById('pass').value,
                document.getElementById('fName').value,document.getElementById('lName').value,document.getElementById('mail').value,document.getElementById('bdate').value);
                //form.submit();
            },

        });    

        $.validator.addMethod("checkOnlyLetters", function(value , element) {
            return this.optional(element)|| /^[a-z][a-z\s]*$/.test(value);
        });
        
        $.validator.addMethod("isUserNotExists", function(value , element) {
        return this.optional(element)|| !(value in users);
        });

        $.validator.addMethod("isLegalPass", function(value , element) {
            return this.optional(element)|| /[A-Za-z]/i.test(value) && /\d/.test(value);
        });
    })

    


    
    function AddUser(username,password,fName,lName,email,bdate){
        var user = new User(username,password,fName,lName,email,bdate);
        users.push(user);
        currUser=user;
        ShowSection('setting');

    }

    function CheckSignIn(username,password){
        if(validateFillFields('.loginFields')){
            var isExist=false;
            users.forEach(user => {
                if(user.username==username && user.password==password){
                    isExist=true;
                    currUser = user;
                }
            });
            if(isExist){
                ShowSection('setting');
            }
            else{
                window.alert("Username or password are wrong! Please try again.");
            }   
        }
        else{
            window.alert("Fill both username and password!");
        }
    }

    function validateFillFields(check) {
        var isValid = true;
        $(check).each(function() {
            if ( $(this).val() === '' ||  $(this).val() === '-None-' || $(this).val() === 'choosen-key')
                isValid = false;
        });
        return isValid;
    }


    function CheckSettings(num_of_balls, color_25_ball, color_15_ball, color_5_ball,game_time,num_monsters){
        var isnum = /^\d+$/.test(game_time);
        if(!validateFillFields('.lblsSetting')){
            window.alert("Fill all fields!")
        }
        else if( is || game_time<0){
            window.alert("game time must be positive number")
        }
        else if(!(/^\d+$/.test(num_monsters)) || num_monsters<1 || num_monsters>3){
            window.alert("number of monster must be between 1 to 3")
        }
        else if(!(/^\d+$/.test(num_of_balls)) || num_of_balls<50 || num_of_balls>90){
            window.alert("number of balls must be between 50 to 90")
        }
        else {

            this.gameTime = parseFloat(game_time);
            this.ball_25 = color_25_ball;
            this.ball_15 = color_15_ball;
            this.ball_5 = color_5_ball;
            this.number_Of_monsters=num_monsters;
            this.balls_number=num_of_balls;
            Start();
            ShowSection('game');
    
        //to-do check fields 
        }
    }

    function random(){
        this.gameTime = 30;
        ball_25 = 'red';
        ball_15 = 'green';
        ball_5 = 'black';    
        c_up='ArrowUp';
        c_down='ArrowDown';
        c_right='ArrowRight';
        c_left='ArrowLeft';
        this.number_Of_monsters=2;
        balls_number=75;
        Start();
        ShowSection('game');
    }

    function ShowSection(id)
    {
        if(gameOver==false && id!='game'){
            window.clearInterval(interval);
            window.clearInterval(interval_monsters);
            window.clearInterval(interval_time_monster);
            window.clearInterval(interval_bonus_monster);
            stopAllSounds();
        }
    	//hide all sections
    	var div1 = document.getElementById('welcome');
    	div1.style.visibility="hidden";
    	var div2 = document.getElementById('game');
    	div2.style.visibility="hidden";
        var div3 = document.getElementById('log-in');
    	div3.style.visibility="hidden";
        var div4 = document.getElementById('sign-up');
    	div4.style.visibility="hidden";;
        var div5 = document.getElementById('setting');
    	div5.style.visibility="hidden";
        //show only one section
		var selected = document.getElementById(id);
    	selected .style.visibility="visible";
    }


    function ShowDialog(){
        document.getElementById("about").showModal();
    }

    function CloseDialog(){
        document.getElementById("about").close();
    }

    //o-empty
    //1-food_25
    //2-food_15
    //3-food_5
    //4-obstacle
    //10-packman
    //12-monster_type1
    //13-monster_on_food_25
    //14-monster_on_food_15
    //15-monster_on_food_5
    //50-time_monster


    function Start() {
        lblPlayerName.value = currUser.username;
        gameOver = false;
        winSound = new sound('winSound.mp4');
        lostSound = new sound('loseSound.mp4');
        playSound = new sound('music.mp3');
        MonsterHitSound = new sound('monsterHitSound.mp4');
        timeOverSound = new sound('timeOverSound.mp4');
        playSound.play();
        board = new Array();
        score = 0;
        number_of_eating = 0;
        pac_color = "yellow";
        var food_remain = balls_number;
        var food_25_remain = balls_number*0.6;
        food_25_remain = Math.floor(food_25_remain);
        var food_15_remain = balls_number*0.3;
        food_15_remain = Math.floor(food_15_remain);
        var food_5_remain = balls_number*0.1;
        food_5_remain = Math.floor(food_5_remain);
        var pacman_remain = 1;
        var monsters_remain = number_Of_monsters;
        activeMonsters = new Array();
        start_time = new Date();
        for (var i = 0; i < 20; i++) {
            board[i] = new Array();
            for (var j = 0; j < 9; j++) {
              if((monsters_remain>0) && ((i===0 && j===0) || (i===19 && j===0) || (i===0 && j===8))){
                    board[i][j]=12;
                    var monster = new Object();
                    monster.i=i;
                    monster.j=j;
                    activeMonsters.push(monster);
                    monsters_remain--;
                }
                else if(i==10 && (j==3 || j==5)){
                    board[i][j] = 4;
                }
                else if(j==4 && (i>=3 && i<=16 && i!=7 && i!=13)){
                    board[i][j] = 4;
                }
                else if(i==18 && j==2){
                    
                }
                else if(i==11 && j==8){
                    board[i][j] = 4;
                }
                  else if (j==1 && (i>=1 && i<=18 && i!=10 && i!=4 && i!=7 && i!=13 && i!=15)){
                    board[i][j] = 4;
                } else if (i==1 && j>=1 && j<=7 && j!=4 && j!=6 && j!=2){
                    board[i][j] = 4;
                } else if (j==6 && i==18){
                    board[i][j] = 4;
                } else if (j==7 && (i>=1 && i<=18 && i!=10 && i!=7 && i!=4 )){
                    board[i][j] = 4;
                } else if (j==3 && (i==19 || i==18)){
                    board[i][j] = 4;
                } else if (j==5 && (i==19 || i==18)){
                    board[i][j] = 4;
                } else {
                        board[i][j] = 0;
                }
            }
        }
        //pacman
        var emptyCell = findRandomEmptyCell(board);
        board[emptyCell[0]][emptyCell[1]] = 10;
        shape.i=emptyCell[0];
        shape.j=emptyCell[1];
        var emptyCell = findRandomEmptyCell(board);
        //time monster
        board[emptyCell[0]][emptyCell[1]] = 50;
        time_monster = new Object();
        time_monster.i=emptyCell[0];
        time_monster.j=emptyCell[1];
        var emptyCell = findRandomEmptyCell(board);
        //bonus monster
        board[emptyCell[0]][emptyCell[1]] = 100;
        bonus_monster = new Object();
        bonus_monster.i=emptyCell[0];
        bonus_monster.j=emptyCell[1];
        while (food_remain > 0) {
            var emptyCell = findRandomEmptyCell(board);
            if(food_25_remain>0){
                food_remain--;
                food_25_remain--;
                board[emptyCell[0]][emptyCell[1]] = 1;
            }
            else if(food_15_remain>0){
                food_remain--;
                food_15_remain--;
                board[emptyCell[0]][emptyCell[1]] = 2;
            }
            else if(food_5_remain>0){
                food_remain--;
                food_5_remain--;
                board[emptyCell[0]][emptyCell[1]] = 3;
            }
            else { food_remain = 0;}
        }
        keysDown = {};
        addEventListener("keydown", function (e) {
            if(e.key == c_up)
            keysDown[c_up] = true;
            if(e.key == c_down)
            keysDown[c_down] = true;
            if(e.key == c_right)
            keysDown[c_right] = true;
            if(e.key == c_left)
            keysDown[c_left] = true;
        }, false);
        interval = setInterval(UpdatePosition, 5);
        interval_monsters = setInterval(ChangeLocationsOfMonsters, count_of_monsters_fast);
        interval_time_monster = setInterval(changeLocationOfTimeMonster, 250);
        interval_bonus_monster = setInterval(changeLocationOfBonusMonster, 250);
    }

    function findRandomEmptyCell(board) {
        var i = Math.floor((Math.random() * 20));
        var j = Math.floor((Math.random() * 9));
        while (board[i][j] !== 0) {
            i = Math.floor((Math.random() * 20));
            j = Math.floor((Math.random() * 9));
        }
        return [i, j];
    }

    /**
     * @return {number}
     */
    function GetKeyPressed() {
        if (keysDown[c_up]) {
            move_direction = 0;
            return 0;
        }
        if (keysDown[c_down]) {
            move_direction = 1;
            return 1;
        }
        if (keysDown[c_right]) {
            move_direction = 2;
            return 2;
        }
        if (keysDown[c_left]) {
            move_direction = 3;
            return 3;
        }
    }

    function Draw() {
        var food_counter = 0;
        context.clearRect(0, 0, canvas.width, canvas.height); //clean board
        lblRemainLife.value = remain_life;
        lblScore.value = score;
        lblTime.value = parseFloat(time_elapsed).toFixed(2);//fixed time show only 2 digits after the dot. like -- > 1.12
        for (var i = 0; i < 20; i++) {
            for (var j = 0; j < 9; j++) {
                var center = new Object();
                center.x = i * 60 + 30;
                center.y = j * 60 + 30;
                if (board[i][j] === 10) {
                    context.beginPath();
                    if(move_direction === 0){//pacman move up
                        context.arc(center.x, center.y, 30, -0.35 * Math.PI, 1.35 * Math.PI); // half circle    
                    }
                    else if(move_direction === 1){//pacman move down
                        context.arc(center.x, center.y, 30, 0.65 * Math.PI, 2.35 * Math.PI); // half circle    
                    }
                    else if(move_direction === 2){//pacman move right
                        context.arc(center.x, center.y, 30, 0.15 * Math.PI, 1.85 * Math.PI); // half circle    
                    }
                    else if(move_direction === 3){//pacman move left
                        context.arc(center.x, center.y, 30, 1.15 * Math.PI, 2.85 * Math.PI); // half circle    
                    }
                    else context.arc(center.x, center.y, 30, 0.15 * Math.PI, 1.85 * Math.PI); // half circle    
                    context.lineTo(center.x, center.y);
                    context.fillStyle = pac_color; //color
                    context.fill();
                    context.beginPath();
                    if(move_direction === 0){//pacman move up
                        context.arc(center.x + 15, center.y - 5, 5, 0, 2 * Math.PI); // circle
                    }
                    else if(move_direction === 1){//pacman move down
                        context.arc(center.x - 15, center.y + 5, 5, 0, 2 * Math.PI); // circle
                    }
                    else if(move_direction === 2){//pacman move right
                        context.arc(center.x + 5, center.y - 15, 5, 0, 2 * Math.PI); // circle
                    }
                    else if(move_direction === 3){//pacman move left
                        context.arc(center.x - 5, center.y - 15, 5, 0, 2 * Math.PI); // circle
                    }
                    else context.arc(center.x + 5, center.y - 15, 5, 0, 2 * Math.PI); // circle
                    context.fillStyle = "black"; //color
                    context.fill();
                } 
                    else if(i==19 && j==4){//if(shape.i==19 && shape.j==4){ 0,6
                    var teleport=new Image();
                    teleport.src="teleport.png";
                    var x=center.x-30;
                    var y=center.y-30;
                    teleport.style.height=60;
                    teleport.style.width=60;
                    context.drawImage(teleport,x,y);
                    } 
                    else if(i==12 && j==8){//if(shape.i==19 && shape.j==4){ 0,6
                    var teleport=new Image();
                    teleport.src="teleport.png";
                    var x=center.x-30;
                    var y=center.y-30;
                    teleport.style.height=60;
                    teleport.style.width=60;
                    context.drawImage(teleport,x,y);
                    }
                    else if (board[i][j] === 1) {
                    food_counter++;
                    context.beginPath();
                    context.arc(center.x, center.y, 8, 0, 2 * Math.PI); // circle
                    context.fillStyle = ball_25; //color
                    context.fill();
                } else if (board[i][j] === 2) {
                    food_counter++;
                    context.beginPath();
                    context.arc(center.x, center.y, 8, 0, 2 * Math.PI); // circle
                    context.fillStyle = ball_15; //color
                    context.fill();
                } else if (board[i][j] === 3) {
                    food_counter++;
                    context.beginPath();
                    context.arc(center.x, center.y, 8, 0, 2 * Math.PI); // circle
                    context.fillStyle = ball_5; //color
                    context.fill();
                } else if (board[i][j] === 4) {
                    context.beginPath();
                    context.rect(center.x - 30, center.y - 30, 60, 60);
                    context.fillStyle = "black"; //color
                    context.fill();
                } else if(board[i][j] === 12 || board[i][j] === 13 || board[i][j] === 14 || board[i][j] === 15){
                    //draw monster
                    var ghost=new Image();
                    ghost.src="ghost.png";
                    var x=center.x-30;
                    var y=center.y-30;
                    ghost.style.height=60;
                    ghost.style.width=60;
                    context.drawImage(ghost,x,y);
                    if(board[i][j] > 12){
                        food_counter++;
                    }
                } else if(board[i][j] >= 50 && board[i][j]<100){
                    if(board[i][j] > 50){
                        food_counter++;
                    }
                    var timemonst=new Image();
                    timemonst.src="clock-removebg.png";
                    var x=center.x-30;
                    var y=center.y-30;
                    timemonst.style.height=60;
                    timemonst.style.width=60;
                    context.drawImage(timemonst,x,y);
                } else if(board[i][j] >= 100){
                    if(board[i][j] > 100){
                        food_counter++;
                    }
                    var bonusmonst=new Image();
                    bonusmonst.src="bonus.png";
                    var x=center.x-30;
                    var y=center.y-30;
                    bonusmonst.style.height=60;
                    bonusmonst.style.width=60;
                    context.drawImage(bonusmonst,x,y);
                }
            }
        }
        if(food_counter==0){
            number_of_eating1=balls_number;
        }
    }

    function UpdatePosition() {
        var b = false;
        if(board[shape.i][shape.j] === 22){
            b=true;
            monsterHit();
        }
        if(board[shape.i][shape.j] === 50){
            b=true;
            number_of_eating++;
            Time_monster_hit();
        }
        else if(board[shape.i][shape.j] > 50 && board[shape.i][shape.j]<100){
            if(board[shape.i][shape.j]==51){
                    score+=25;
            }
            else if(board[shape.i][shape.j]==52){
                score+=15;
            }
            else if(board[shape.i][shape.j]==53){
                score+=5;
            }
            b=true;
            number_of_eating++;
            Time_monster_hit();
        }
        if(board[shape.i][shape.j] === 100){
            b=true;
            number_of_eating++;
            Bonus_monster_hit();
        }
        else if(board[shape.i][shape.j] > 100){
            if(board[shape.i][shape.j]==101){
                    score+=25;
            }
            else if(board[shape.i][shape.j]==102){
                score+=15;
            }
            else if(board[shape.i][shape.j]==103){
                score+=5;
            }
            b=true;
            number_of_eating++;
            Bonus_monster_hit();
        }
        board[shape.i][shape.j] = 0;
        var x = GetKeyPressed();
        if (x === 0) {
            if (shape.j > 0 && board[shape.i][shape.j - 1] !== 4) {
                shape.j--;
            }
        }
        else if (x === 1) {
            if (shape.j < 8 && board[shape.i][shape.j + 1] !== 4) {
                shape.j++;
            }
        }
        else if (x === 2) { 
            if (shape.i < 19 && board[shape.i + 1][shape.j] !== 4) {
                shape.i++;
            }
        }
        else if (x === 3) {
            if (shape.i > 0 && board[shape.i - 1][shape.j] !== 4) {
                shape.i--;
            }
        }
        else if(shape.i==12 && shape.j==8){
                if(board[shape.i][shape.j]==1){
                    score+=25;
                }
                else if(board[shape.i][shape.j]==2){
                    score+=15;
                }
                else if(board[shape.i][shape.j]==3){
                    score+=5;
                }
                else if(board[shape.i][shape.j]>=50 && board[shape.i][shape.j]<100){
                    Time_monster_hit();
                    b=true;
                    if(board[shape.i][shape.j]==51){
                        score+=25;
                    }
                    else if(board[shape.i][shape.j]==52){
                        score+=15;
                    }
                    else if(board[shape.i][shape.j]==53){
                        score+=5;
                    }
                }
                else if(board[shape.i][shape.j]>=100){
                    Bonus_monster_hit();
                    b=true;
                    if(board[shape.i][shape.j]==101){
                        score+=25;
                    }
                    else if(board[shape.i][shape.j]=102){
                        score+=15;
                    }
                    else if(board[shape.i][shape.j]==103){
                        score+=5;
                    }
                }
                board[shape.i][shape.j] = 10;
                Draw();
                b = true;
                board[shape.i][shape.j] = 0;
                shape.i=18;
                shape.j=4;
        }
        else if(shape.i==19 && shape.j==4){
                if(board[shape.i][shape.j]==1){
                    score+=25;
                }
                else if(board[shape.i][shape.j]==2){
                    score+=15;
                }
                else if(board[shape.i][shape.j]==3){
                    score+=5;
                }
                else if(board[shape.i][shape.j]>=50 && board[shape.i][shape.j]<100){
                    Time_monster_hit();
                    b=true;
                    if(board[shape.i][shape.j]==51){
                        score+=25;
                        
                    }
                    else if(board[shape.i][shape.j]==52){
                        score+=15;
                    }
                    else if(board[shape.i][shape.j]==53){
                        score+=5;
                    }
                }
                else if(board[shape.i][shape.j]>=100){
                    Bonus_monster_hit();
                    b=true;
                    if(board[shape.i][shape.j]==101){
                        score+=25;
                    }
                    else if(board[shape.i][shape.j]==102){
                        score+=15;
                    }
                    else if(board[shape.i][shape.j]==103){
                        score+=5;
                    }
                }
                board[shape.i][shape.j] = 10;
                Draw();
                board[shape.i][shape.j] = 0;
                shape.i=13;
                shape.j=8;
                b = true;
            }
            
        
        
        keysDown[c_up] = false;
        keysDown[c_down] = false;
        keysDown[c_right] = false;
        keysDown[c_left] = false;
        
        if (board[shape.i][shape.j] === 1) {
            score+=25;
            number_of_eating++;
        }
        if (board[shape.i][shape.j] === 2) {
            score+=15;
            number_of_eating++;
        }
        if (board[shape.i][shape.j] === 3) {
            score+=5;
            number_of_eating++;
        }
        if(b==false && (board[shape.i][shape.j] === 12 || board[shape.i][shape.j] === 13 || board[shape.i][shape.j] === 14 || board[shape.i][shape.j] === 15 )){
            b=true;
            monsterHit();
        } else if(b==false && (board[shape.i][shape.j] === 50 || board[shape.i][shape.j] === 51 || board[shape.i][shape.j] === 52 || board[shape.i][shape.j] === 53 )){
            if(board[shape.i][shape.j] > 50){
                if(board[shape.i][shape.j]==51){
                    score+=25;
                }
                else if(board[shape.i][shape.j]==52){
                    score+=15;
                }
                else if(board[shape.i][shape.j]==53){
                    score+=5;
                }
            }
            b=true;
            Time_monster_hit();
        } else if(b==false && (board[shape.i][shape.j] === 100 || board[shape.i][shape.j] === 101 || board[shape.i][shape.j] === 102 || board[shape.i][shape.j] === 103 )){
            if(board[shape.i][shape.j] > 100){
                if(board[shape.i][shape.j]==101){
                    score+=25;
                }
                else if(board[shape.i][shape.j]==102){
                    score+=15;
                }
                else if(board[shape.i][shape.j]==103){
                    score+=5;
                }
            }
            b=true;
            Bonus_monster_hit();
        } 
       board[shape.i][shape.j] = 10;
      
        var currentTime = new Date();
        time_elapsed = gameTime + gameTimeBonus - (currentTime - start_time) / 1000;
        if(time_elapsed<5){
            playSound.stop();
            timeOverSound.play();
        }
        else{
            playSound.play();
        }
        if (score >= 300 && (currentTime - start_time)/1000 <= 10) {
            pac_color = "green";
        }
        if (!gameOver && (number_of_eating1 === balls_number || time_elapsed<=0)) {
            if(score<800 && remain_life >= 0){
                Draw();
                gameOver = true;
                playSound.stop();
                lostSound.play();        
                window.alert("You Lost!");   
                window.clearInterval(interval);
                window.clearInterval(interval_monsters);
                window.clearInterval(interval_time_monster);
                window.clearInterval(interval_bonus_monster);
            }
            else{
                Draw();
                gameOver = true;
                winSound.play();        
                playSound.stop();
                window.alert("We have a Winner!!!");   
                window.clearInterval(interval);
                window.clearInterval(interval_monsters);
                window.clearInterval(interval_time_monster);
                window.clearInterval(interval_bonus_monster);

            }
        }
        else if(!gameOver && remain_life==0){
            Draw();
            lostSound.play();    
            gameOver = true;
            playSound.stop();
            window.alert("You Lost!");   
            window.clearInterval(interval);
            window.clearInterval(interval_monsters);
            window.clearInterval(interval_time_monster);
            window.clearInterval(interval_bonus_monster);
        }
        else {
            if(b==false)
                Draw();
        }
    }

    function updateUp() {
        $(document).keydown(function(event){
            document.getElementById('up-controll').value = event.key;
            c_up = event.key;
            $(document).unbind()
        });
    }
    function updateDown() {
        $(document).keydown(function(event){
            document.getElementById('down-controll').value = event.key;
            c_down = event.key;
            $(document).unbind()
        });
    }
    function updateRight() {
        $(document).keydown(function(event){
            document.getElementById('right-controll').value = event.key;
            c_right = event.key;
            $(document).unbind()
        });
    }
    function updateLeft() {
        $(document).keydown(function(event){
            document.getElementById('left-controll').value = event.key;
            c_left = event.key;
            $(document).unbind()
        });
    }

    function new_game() {
        //clear monster and regular intervals
        window.clearInterval(interval);
        window.clearInterval(interval_monsters);
        window.clearInterval(interval_time_monster);
        window.clearInterval(interval_bonus_monster);
        gameOver=false;
        //stop all sounds.
        stopAllSounds();
        //start new game
        number_of_eating1=0;
        remain_life=3;
        gameTimeBonus=0;
        count_of_monsters_fast=1000;
        Start();
    }

    function monsterHit(){
        score-=10;
        board[shape.i][shape.j]=12;
        remain_life--;
        Draw();
        var emptyCell = findRandomEmptyCell(board);
        board[emptyCell[0]][emptyCell[1]] = 10;
        shape.i=emptyCell[0];
        shape.j=emptyCell[1];
        var count_monsters = 0;
        activeMonsters.forEach(function(monster){
            board[monster.i][monster.j]-=12;
            if(count_monsters === 0){
                board[0][0]=12;
                monster.i=0;
                monster.j=0;
            }
            else if(count_monsters === 1){
                board[0][8]=12;
                monster.i=0;
                monster.j=8;
            }
            else if(count_monsters === 2){
                board[19][0]=12;
                monster.i=19;
                monster.j=0;
            }
            count_monsters++;
        })
        MonsterHitSound.play();
    }

    window.addEventListener("keydown", function(e) {
    // space and arrow keys
    if([32, 37, 38, 39, 40].indexOf(e.keyCode) > -1) {
        e.preventDefault();
    }
    }, false);

    
    function changeLocationOfBonusMonster(){
        var distance_max = 0;
        var chosen_i = bonus_monster.i;
        var chosen_j = bonus_monster.j;
        if(bonus_monster.j > 0 && board[bonus_monster.i][bonus_monster.j-1] != 4 && board[bonus_monster.i][bonus_monster.j-1]<12 && !(bonus_monster.i==18 && bonus_monster.j-1==4) && !(bonus_monster.i==12 && bonus_monster.j-1==8)){
            var distanceUp =  Math.sqrt( Math.pow(bonus_monster.i-shape.i,2) + Math.pow(bonus_monster.j-1-shape.j,2));
            if(distanceUp > distance_max){
                distance_max = distanceUp;
                chosen_i=bonus_monster.i;
                chosen_j=bonus_monster.j-1;
            }
        } 
        if(bonus_monster.j < 8 && board[bonus_monster.i][bonus_monster.j+1]!=4 && board[bonus_monster.i][bonus_monster.j+1] < 12 && !(bonus_monster.i==18 && bonus_monster.j+1==4) && !(bonus_monster.i==12 && bonus_monster.j+1==8)){
            var distanceDown =  Math.sqrt( Math.pow(bonus_monster.i-shape.i,2) + Math.pow(bonus_monster.j+1-shape.j,2));
            if(distanceDown > distance_max){
                distance_max = distanceDown;
                chosen_i=bonus_monster.i;
                chosen_j=bonus_monster.j+1;
            }
        }
        if(bonus_monster.i > 0 && board[bonus_monster.i-1][bonus_monster.j]!=4 && board[bonus_monster.i-1][bonus_monster.j] < 12 && !(bonus_monster.i-1==18 && bonus_monster.j==4) && !(bonus_monster.i-1==12 && bonus_monster.j==8)){
            var distanceLeft =  Math.sqrt( Math.pow(bonus_monster.i-1-shape.i,2) + Math.pow(bonus_monster.j-shape.j,2));
            if(distanceLeft > distance_max){
                distance_max = distanceLeft;
                chosen_i=bonus_monster.i-1;
                chosen_j=bonus_monster.j;
            }
        }
        if(bonus_monster.i < 19 && board[bonus_monster.i+1][bonus_monster.j]!=4 && board[bonus_monster.i+1][bonus_monster.j] < 12 && !(bonus_monster.i+1==18 && bonus_monster.j==4) && !(bonus_monster.i+1  ==12 && bonus_monster.j==8)){
            var distanceRight =  Math.sqrt( Math.pow(bonus_monster.i+1-shape.i,2) + Math.pow(bonus_monster.j-shape.j,2));
            if(distanceRight > distance_max){
                distance_max = distanceRight;
                chosen_i=bonus_monster.i+1;
                chosen_j=bonus_monster.j;
            }
        }
        board[bonus_monster.i][bonus_monster.j]-=100;
        board[chosen_i][chosen_j]+=100;
        bonus_monster.i=chosen_i;
        bonus_monster.j=chosen_j;

    }

    function changeLocationOfTimeMonster(){
        var distance_max = 0;
        var chosen_i = time_monster.i;
        var chosen_j = time_monster.j;
        if(time_monster.j > 0 && board[time_monster.i][time_monster.j-1] != 4 && board[time_monster.i][time_monster.j-1]<12 && !(time_monster.i==18 && time_monster.j-1==4) && !(time_monster.i==12 && time_monster.j-1==8)){
            var distanceUp =  Math.sqrt( Math.pow(time_monster.i-shape.i,2) + Math.pow(time_monster.j-1-shape.j,2));
            if(distanceUp > distance_max){
                distance_max = distanceUp;
                chosen_i=time_monster.i;
                chosen_j=time_monster.j-1;
            }
        } 
        if(time_monster.j < 8 && board[time_monster.i][time_monster.j+1]!=4 && board[time_monster.i][time_monster.j+1] < 12  && !(time_monster.i==18 && time_monster.j+1==4) && !(time_monster.i==12 && time_monster.j+1==8)){
            var distanceDown =  Math.sqrt( Math.pow(time_monster.i-shape.i,2) + Math.pow(time_monster.j+1-shape.j,2));
            if(distanceDown > distance_max){
                distance_max = distanceDown;
                chosen_i=time_monster.i;
                chosen_j=time_monster.j+1;
            }
        }
        if(time_monster.i > 0 && board[time_monster.i-1][time_monster.j]!=4 && board[time_monster.i-1][time_monster.j] < 12  && !(time_monster.i-1==18 && time_monster.j==4) && !(time_monster.i-1==12 && time_monster.j==8)){
            var distanceLeft =  Math.sqrt( Math.pow(time_monster.i-1-shape.i,2) + Math.pow(time_monster.j-shape.j,2));
            if(distanceLeft > distance_max){
                distance_max = distanceLeft;
                chosen_i=time_monster.i-1;
                chosen_j=time_monster.j;
            }
        }
        if(time_monster.i < 19 && board[time_monster.i+1][time_monster.j]!=4 && board[time_monster.i+1][time_monster.j] < 12  && !(time_monster.i+1==18 && time_monster.j==4) && !(time_monster.i+1==12 && time_monster.j==8)){
            var distanceRight =  Math.sqrt( Math.pow(time_monster.i+1-shape.i,2) + Math.pow(time_monster.j-shape.j,2));
            if(distanceRight > distance_max){
                distance_max = distanceRight;
                chosen_i=time_monster.i+1;
                chosen_j=time_monster.j;
            }
        }
        board[time_monster.i][time_monster.j]-=50;
        board[chosen_i][chosen_j]+=50;
        time_monster.i=chosen_i;
        time_monster.j=chosen_j;
    }

    function ChangeLocationsOfMonsters(){
        activeMonsters.forEach(function(monster) {
            var distance_minimum = 10000;
            var chosen_i = monster.i;
            var chosen_j = monster.j;
            if(monster.j > 0 && board[monster.i][monster.j-1] != 4 && board[monster.i][monster.j-1]<=10){
                var distanceUp =  Math.sqrt( Math.pow(monster.i-shape.i,2) + Math.pow(monster.j-1-shape.j,2));
                if(distanceUp < distance_minimum){
                    distance_minimum = distanceUp;
                    chosen_i=monster.i;
                    chosen_j=monster.j-1;
                }
            } 
            if(monster.j < 8 && board[monster.i][monster.j+1]!=4 && board[monster.i][monster.j+1] <=10){
                var distanceDown =  Math.sqrt( Math.pow(monster.i-shape.i,2) + Math.pow(monster.j+1-shape.j,2));
                if(distanceDown < distance_minimum){
                    distance_minimum = distanceDown;
                    chosen_i=monster.i;
                    chosen_j=monster.j+1;
                }
            }
            if(monster.i > 0 && board[monster.i-1][monster.j]!=4 && board[monster.i-1][monster.j] <=10){
                var distanceLeft =  Math.sqrt( Math.pow(monster.i-1-shape.i,2) + Math.pow(monster.j-shape.j,2));
                if(distanceLeft < distance_minimum){
                    distance_minimum = distanceLeft;
                    chosen_i=monster.i-1;
                    chosen_j=monster.j;
                }
            }
            if(monster.i < 19 && board[monster.i+1][monster.j]!=4 && board[monster.i+1][monster.j] <=10){
                var distanceRight =  Math.sqrt( Math.pow(monster.i+1-shape.i,2) + Math.pow(monster.j-shape.j,2));
                if(distanceRight < distance_minimum){
                    distance_minimum = distanceRight;
                    chosen_i=monster.i+1;
                    chosen_j=monster.j;
                }
            }
            board[monster.i][monster.j]-=12;
            board[chosen_i][chosen_j]+=12;
            monster.i=chosen_i;
            monster.j=chosen_j;
        });
    }



    //get the modal dialog of ("about")
    var dialog = document.getElementById('about');
    //close the about dialog when click outside of it with the mouse
    dialog.addEventListener('click', function (event) {
        var rect = dialog.getBoundingClientRect();
        var isInDialog=(rect.top <= event.clientY && event.clientY <= rect.top + rect.height
        && rect.left <= event.clientX && event.clientX <= rect.left + rect.width);
        if (!isInDialog) {
            dialog.close();
        }
    });

    function stopAllSounds(){
            playSound.stop();
            winSound.stop();
            lostSound.stop();
            MonsterHitSound.stop();
            timeOverSound.stop();
    }

    function faster_monsters(){
        window.clearInterval(interval_monsters);
        interval_monsters = setInterval(ChangeLocationsOfMonsters, (count_of_monsters_fast));
        count_of_monsters_fast = count_of_monsters_fast*0.6;
    }

    function Time_monster_hit(){
        gameTimeBonus = 50;
        window.clearInterval(interval_time_monster);
    }
    
    function Bonus_monster_hit(){
        score += 50;
        window.clearInterval(interval_bonus_monster);
    }
</script>
</body>

</html>