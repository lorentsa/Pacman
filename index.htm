<!DOCTYPE html>
<html>

<head>
        <link rel="stylesheet" type="text/css"  href="style.css" /> 
        <script src="http://ajax.googleapis.com/ajax/libs/jquery/1.10.2/jquery.min.js"></script>
</head>

<body>

<header>
    <!DOCTYPE html>
<html>

<head>
        <link rel="stylesheet" type="text/css"  href="style.css" /> 
        <script src="http://ajax.googleapis.com/ajax/libs/jquery/1.10.2/jquery.min.js"></script>
</head>

<body>

<header>
    <img src="pacman.png" id="pacman">
    <h1 id="pacmanTitle" >Pacman</h1>
    <h5 id="loren">Loren Tsahalon</h5>
    <h5>Niv Dudovitch</h5>
</header>



<nav>
    <ul>
        <li><a href="#welcome" onclick="ShowSection('welcome')">Welcome</a></li>
        <li><a href="#log-in" onclick="ShowSection('log-in')">Log-in</a></li>
        <li><a href="#sign-up" onclick="ShowSection('sign-up')">Sign-up</a></li>
        <li><a href="#about" onclick="ShowDialog()">About</a></li>
    </ul>
</nav>

<footer>
    conect details
</footer>

<dialog id="about">
    <button onclick="CloseDialog()">X</button>
    <br>
    Niv Dudovitch
    <br>
    Loren Tsahalon
</dialog>

<div id="game" style="visibility: hidden;">
    <br/>
    Player Name:
    <input id="lblPlayerName" type="text" class = lbls/>
    <br/>
    SCORE:
    <input id="lblScore" type="text" class = lbls/>
    <br/>
    remain life:
    <input id="lblRemainLife" type="text" class = lbls/>
    <br/>
    TIME:
    <input id="lblTime" type="text" class = lbls/>
    <br/>
    <input type="button" value="new-game" onclick="new_game()">
    <br/>
    <input type="button" value="faster_monsters" onclick="faster_monsters()">
    <br/>
    <canvas id="canvas" height="600" width="600"></canvas>

</div>

<div id="welcome" style="visibility: visible;">
    <input type="button" value="log-in" onclick="ShowSection('log-in')">
    <input type="button" value="sign-up" onclick="ShowSection('sign-up')">
    <br>
    <img src="play.png">
</div>

<div id="sign-up" style="visibility: hidden;">
    <h4>Username: </h4>
    <input id="uName" type="text" class="check">
    <br>
    <h4>Password: </h4>
    <input id="pass" type="password" class="check">
    <br>
    <h4>First Name: </h4>
    <input id="fName" type="text" class="check">
    <br>
    <h4>Last Name: </h4>
    <input id="lName" type="text" class="check">
    <br>
    <h4>Email: </h4>
    <input id="mail" type = "email" placeholder = "name@domain.com" class="check"> 
    <br>
    <h4>Birth Date: </h4>
    <input id="bdate" type="date" class="check">
    <br>

    <input type="button" value="Sign up" onclick="AddUser(document.getElementById('uName').value,document.getElementById('pass').value,
    document.getElementById('fName').value,document.getElementById('lName').value,document.getElementById('mail').value,document.getElementById('bdate').value)">
    
</div>

<div id="log-in" style="visibility: hidden;">
    <h1>Username: </h1>
    <input id="username" type="text">
    <br>
    <h1>Password: </h1>
    <input id="passw" type="text">
    <br>
    <br>

    <input type="button" value="sign-in" onclick="CheckSignIn(document.getElementById('username').value,
    document.getElementById('passw').value)">
</div>


<div id="setting" style="visibility: hidden;">
    

    UpButton:
    <input type="button" value="set Up movement" onclick=" c_up = updateUp()"><br><br>
    DownButton:
    <input type="button" value="set Down movement" onclick="c_down = updateDown()"><br><br>
    RightButton:
    <input type="button" value="set Right movement" onclick="c_right = updateRight()"><br><br>
    LeftButton:
    <input type="button" value="set Left movement" onclick="c_left = updateLeft()"><br><br>
    
    <!-- <h4>move up controll: </h4>
    <input id="move_up" type="text">
    <h4>move down controll: </h4>
    <input id="move_down" type="text">
    <h4>move right controll: </h4>
    <input id="move_right" type="text">
    <h4>move left controll:</h4>
    <input id="move_left" type="text"> -->
    <h4>number of balls: (between 50 to 90) </h4>
    <input id="num_of_balls" type="text">
    <select name="list" id="colorList25">
        <option value="blue">blue</option>
        <option value="red">red</option>
        <option value="black">black</option>
    </select>
    <select name="list" id="colorList15">
            <option value="blue">blue</option>
            <option value="red">red</option>
            <option value="black">black</option>
        </select>
    <select name="list" id="colorList5">
                <option value="blue">blue</option>
                <option value="red">red</option>
                <option value="black">black</option>
                   </select>
    <h4>Number of monsters: </h4>
    <input id="num_of_monsters" type="text">
    <h4>Enter game time: </h4>
    <input id="game_time" type="text">
    <br>
    <br>
    <input type="button" value="Random" onclick="random()">
    <input type="button" value="Done" onclick="CheckSettings(document.getElementById('num_of_balls').value,//document.getElementById('move_up').value,document.getElementById('move_down').value,document.getElementById('move_right').value,document.getElementById('move_left').value,
    document.getElementById('colorList25').value,document.getElementById('colorList15').value,
    document.getElementById('colorList5').value,document.getElementById('game_time').value,
    document.getElementById('num_of_monsters').value)">
</div>

<script type="text/javascript">
    var context = canvas.getContext("2d");
    var shape = new Object();
    var board;
    var score;
    var move_direction;
    var ball_25;
    var ball_15;
    var ball_5;
    var c_up;
    var c_down;
    var c_right;
    var c_left;
    var gameTime;
    var gameTimeBonus=0;
    var number_of_eating;
    var balls_number;
    var pac_color;
    var start_time;
    var time_elapsed;
    var interval;
    var users;
    var playSound;
    var winSound;
    var lostSound;
    //var gameOver;//true when the game finished (timeElapsed\monsterKillU\Winning).
    var currUser;//represent the current log-in user.
    var remain_life=3;
    var number_Of_monsters;
    var count_of_monsters_fast=1000;
    var time_monster;
    var interval_time_monster;

    class User{
        constructor(username,password,fName,lName,email,bDate) {
            this.username = username;
            this.password = password;
            this.fName = fName;
            this.lName = lName;
            this.email = email;
            this.bDate = bDate;
        }
    }
    class sound{
        constructor(src) {
            this.sound = document.createElement("audio");
            this.sound.src = src;
            this.sound.setAttribute("preload", "auto");
            this.sound.setAttribute("controls", "none");
            this.sound.style.display = "none";
            document.body.appendChild(this.sound);
            this.play = function(){
                this.sound.play();
            }
            this.stop = function(){
                this.sound.pause();
            }
        }
    }


    $(document).ready(function(){
        users = new Array();
        var user = new User('a','a','a','a','a@a.a','1.1.1991');
        users.push(user);
    })

    function AddUser(username,password,fName,lName,email,bdate){
        if(!validateFillFields('.signupFields')){
            window.alert("All fields have to be fill!")
        }
        else if(fName.value.matches(".\\d.")|| lName.value.matches(".\\d.")){
            window.alert("First and Last name can't contain numbers!")
        }
        else{
            var user = new User(username,password,fName,lName,email,bdate);
            users.push(user);
            ShowSection('setting');
        }
    }

    function CheckSignIn(username,password){
        if(validateFillFields('.loginFields')){
            var isExist=false;
            users.forEach(user => {
                if(user.username==username && user.password==password){
                    isExist=true;
                    currUser = user;
                }
            });
            if(isExist){
                ShowSection('setting');
            }
            else{
                window.alert("Username or password are wrong! Please try again.");
            }   
        }
        else{
            window.alert("Fill both username and password!");
        }
    }

    function validateFillFields(check) {
        var isValid = true;
        $(check).each(function() {
            if ( $(this).val() === '' )
                isValid = false;
        });
        return isValid;
    }


    function CheckSettings(num_of_balls, color_25_ball, color_15_ball, color_5_ball,game_time){
        // if($("#c_up,#c_down,#c_right,#c_left,#num_of_balls,#color_25_ball,#color_15_ball,#color_5_ball:empty").length>0){
        //     window.alert("Fill all fields!")
        // }
        // else {
            this.gameTime = parseFloat(game_time);
            this.ball_25 = color_25_ball;
            this.ball_15 = color_15_ball;
            this.ball_5 = color_5_ball;
            this.number_Of_monsters=num_monsters;
            this.balls_number=num_of_balls;
            Start();
            ShowSection('game');
    
        //to-do check fields 
    }

    function random(){
        this.gameTime = 15;
        ball_25 = 'red';
        ball_15 = 'green';
        ball_5 = 'black';    
        c_up='ArrowUp';
        c_down='ArrowDown';
        c_right='ArrowRight';
        c_left='ArrowLeft';
        this.number_Of_monsters=2;
        balls_number=50;
        ShowSection('game');
        Start();
    }

    function ShowSection(id)
    {
    	//hide all sections
    	var div1 = document.getElementById('welcome');
    	div1.style.visibility="hidden";
    	var div2 = document.getElementById('game');
    	div2.style.visibility="hidden";
        var div3 = document.getElementById('log-in');
    	div3.style.visibility="hidden";
        var div4 = document.getElementById('sign-up');
    	div4.style.visibility="hidden";
        var div5 = document.getElementById('setting');
    	div5.style.visibility="hidden";
        //show only one section
		var selected = document.getElementById(id);
    	selected .style.visibility="visible";
    }


    function ShowDialog(){
        document.getElementById("about").showModal();
    }

    function CloseDialog(){
        document.getElementById("about").close();
    }

    //o-empty
    //1-food_25
    //2-food_15
    //3-food_5
    //4-obstacle
    //10-packman
    //12-monster_type1
    //13-monster_on_food_25
    //14-monster_on_food_15
    //15-monster_on_food_5
    //50-time_monster


    function Start() {
        lblPlayerName.value = currUser.username;
        //gameOver = false;
        winSound = new sound('message.mp3');//to-do change
        lostSound = new sound('message.mp3');//to-do change
        playSound = new sound('music.mp3');
        playSound.play();
        board = new Array();
        score = 0;
        number_of_eating = 0;
        pac_color = "yellow";
        var food_remain = balls_number;
        //to-do food of scores
        var food_25_remain = balls_number*0.6;
        food_25_remain = Math.floor(food_25_remain);
        var food_15_remain = balls_number*0.3;
        food_15_remain = Math.floor(food_15_remain);
        var food_5_remain = balls_number*0.1;
        food_5_remain = Math.floor(food_5_remain);
        var pacman_remain = 1;
        start_time = new Date();
        for (var i = 0; i < 10; i++) {
            board[i] = new Array();
            //put obstacles in (i=3,j=3) and (i=3,j=4) and (i=3,j=5), (i=6,j=1) and (i=6,j=2)
            for (var j = 0; j < 10; j++) {
                if ((i === 3 && j === 3) || (i === 3 && j === 4) || (i === 3 && j === 5) || (i === 6 && j === 1) || (i === 6 && j === 2)) {
                    board[i][j] = 4;
                } else {
                    var randomNum = Math.random();
                    if(food_25_remain>0 && randomNum >=0.7){
                        food_remain--;
                        food_25_remain--;
                        board[i][j] = 1;
                    }
                    else if(food_15_remain>0 && randomNum>=0.5){
                        food_remain--;
                        food_15_remain--;
                        board[i][j] = 2;
                    }
                    else if(food_5_remain>=0.3){
                        food_remain--;
                        food_5_remain--;
                        board[i][j] = 3;
                    }
                    else {
                        board[i][j] = 0;
                    }
                }
            }
        }
        var emptyCell = findRandomEmptyCell(board);
        board[emptyCell[0]][emptyCell[1]] = 10;
        shape.i=emptyCell[0];
        shape.j=emptyCell[1];
        var emptyCell = findRandomEmptyCell(board);
        board[emptyCell[0]][emptyCell[1]] = 50;
        time_monster = new Object();
        time_monster.i=emptyCell[0];
        time_monster.j=emptyCell[1];
        while (food_remain > 0) {
            var emptyCell = findRandomEmptyCell(board);
            if(food_25_remain>0){
                food_remain--;
                food_25_remain--;
                board[emptyCell[0]][emptyCell[1]] = 1;
            }
            else if(food_15_remain>0){
                food_remain--;
                food_15_remain--;
                board[emptyCell[0]][emptyCell[1]] = 2;
            }
            else if(food_5_remain>0){
                food_remain--;
                food_5_remain--;
                board[emptyCell[0]][emptyCell[1]] = 3;
            }
            else { food_remain = 0;}
        }
        keysDown = {};
        addEventListener("keydown", function (e) {
            if(e.key == c_up)
            keysDown[c_up] = true;
            if(e.key == c_down)
            keysDown[c_down] = true;
            if(e.key == c_right)
            keysDown[c_right] = true;
            if(e.key == c_left)
            keysDown[c_left] = true;
        }, false);
        interval = setInterval(UpdatePosition, 50);
        interval_monsters = setInterval(ChangeLocationsOfMonsters, count_of_monsters_fast);
        interval_time_monster = setInterval(changeLocationOfTimeMonster, 2000);
    }


    function findRandomEmptyCell(board) {
        var i = Math.floor((Math.random() * 9) + 1);
        var j = Math.floor((Math.random() * 9) + 1);
        while (board[i][j] !== 0) {
            i = Math.floor((Math.random() * 9) + 1);
            j = Math.floor((Math.random() * 9) + 1);
        }
        return [i, j];
    }

    /**
     * @return {number}
     */
    function GetKeyPressed() {
        if (keysDown[c_up]) {
            move_direction = 0;
            return 0;
        }
        if (keysDown[c_down]) {
            move_direction = 1;
            return 1;
        }
        if (keysDown[c_right]) {
            move_direction = 2;
            return 2;
        }
        if (keysDown[c_left]) {
            move_direction = 3;
            return 3;
        }
    }

    function Draw() {
        context.clearRect(0, 0, canvas.width, canvas.height); //clean board
        lblRemainLife.value = remain_life;
        lblScore.value = score;
        lblTime.value = time_elapsed;
        for (var i = 0; i < 10; i++) {
            for (var j = 0; j < 10; j++) {
                var center = new Object();
                center.x = i * 60 + 30;
                center.y = j * 60 + 30;
                if (board[i][j] === 10) {
                    context.beginPath();
                    if(move_direction === 0){//pacman move up
                        context.arc(center.x, center.y, 30, -0.35 * Math.PI, 1.35 * Math.PI); // half circle    
                    }
                    else if(move_direction === 1){//pacman move down
                        context.arc(center.x, center.y, 30, 0.65 * Math.PI, 2.35 * Math.PI); // half circle    
                    }
                    else if(move_direction === 2){//pacman move right
                        context.arc(center.x, center.y, 30, 0.15 * Math.PI, 1.85 * Math.PI); // half circle    
                    }
                    else if(move_direction === 3){//pacman move left
                        context.arc(center.x, center.y, 30, 1.15 * Math.PI, 2.85 * Math.PI); // half circle    
                    }
                    else context.arc(center.x, center.y, 30, 0.15 * Math.PI, 1.85 * Math.PI); // half circle    
                    context.lineTo(center.x, center.y);
                    context.fillStyle = pac_color; //color
                    context.fill();
                    context.beginPath();
                    if(move_direction === 0){//pacman move up
                        context.arc(center.x + 15, center.y - 5, 5, 0, 2 * Math.PI); // circle
                    }
                    else if(move_direction === 1){//pacman move down
                        context.arc(center.x - 15, center.y + 5, 5, 0, 2 * Math.PI); // circle
                    }
                    else if(move_direction === 2){//pacman move right
                        context.arc(center.x + 5, center.y - 15, 5, 0, 2 * Math.PI); // circle
                    }
                    else if(move_direction === 3){//pacman move left
                        context.arc(center.x - 5, center.y - 15, 5, 0, 2 * Math.PI); // circle
                    }
                    else context.arc(center.x + 5, center.y - 15, 5, 0, 2 * Math.PI); // circle
                    context.fillStyle = "black"; //color
                    context.fill();
                } else if (board[i][j] === 1) {
                    context.beginPath();
                    context.arc(center.x, center.y, 15, 0, 2 * Math.PI); // circle
                    context.fillStyle = ball_25; //color
                    context.fill();
                } else if (board[i][j] === 2) {
                    context.beginPath();
                    context.arc(center.x, center.y, 15, 0, 2 * Math.PI); // circle
                    context.fillStyle = ball_15; //color
                    context.fill();
                } else if (board[i][j] === 3) {
                    context.beginPath();
                    context.arc(center.x, center.y, 15, 0, 2 * Math.PI); // circle
                    context.fillStyle = ball_5; //color
                    context.fill();
                } else if (board[i][j] === 4) {
                    context.beginPath();
                    context.rect(center.x - 30, center.y - 30, 60, 60);
                    context.fillStyle = "grey"; //color
                    context.fill();
                } else if(board[i][j] === 12 || board[i][j] === 13 || board[i][j] === 14 || board[i][j] === 15){
                    //to-do draw monster
                    // base_image = new Image();
                    // base_image.src = 'monster.jpg';
                    // base_image.onload = function(){
                    //     context.drawImage(base_image, 0, 0);
                    // }
                    // context.beginPath();
                    // context.rect(center.x - 30, center.y - 30, 60, 60);
                    // context.fillStyle = "red"; //color
                    // context.fill();
                    context.beginPath();
                    context.arc(center.x, center.y, 22, 0,  Math.PI); // circle
                    context.fillStyle = "orange"; //color
                    context.fill();
                } else if(board[i][j] >= 50){
                    context.beginPath();
                    context.arc(center.x, center.y, 28, 0,  Math.PI); // circle
                    context.fillStyle = "gray"; //color
                    context.fill();
                }
            }
        }


    }

    function UpdatePosition() {
        var b = false;
        if(board[shape.i][shape.j] === 22){
            b=true;
            monsterHit();
        }
        if(board[shape.i][shape.j] >= 50){
            b=true;
            Time_monster_hit();
        }
        board[shape.i][shape.j] = 0;
        var x = GetKeyPressed();
        if (x === 0) {
            if (shape.j > 0 && board[shape.i][shape.j - 1] !== 4) {
                shape.j--;
            }
        }
        if (x === 1) {
            if (shape.j < 9 && board[shape.i][shape.j + 1] !== 4) {
                shape.j++;
            }
        }
        if (x === 2) {
            if (shape.i < 9 && board[shape.i + 1][shape.j] !== 4) {
                shape.i++;
            }
        }
        if (x === 3) {
            if (shape.i > 0 && board[shape.i - 1][shape.j] !== 4) {
                shape.i--;
            }
        }
        
        keysDown[c_up] = false;
        keysDown[c_down] = false;
        keysDown[c_right] = false;
        keysDown[c_left] = false;
        
        if (board[shape.i][shape.j] === 1) {
            score+=25;
            number_of_eating++;
        }
        if (board[shape.i][shape.j] === 2) {
            score+=15;
            number_of_eating++;
        }
        if (board[shape.i][shape.j] === 3) {
            score+=5;
            number_of_eating++;
        }
        if(b==false && (board[shape.i][shape.j] === 12 || board[shape.i][shape.j] === 13 || board[shape.i][shape.j] === 14 || board[shape.i][shape.j] === 15 )){
            b=true;
            monsterHit();
        } else if(b==false && (board[shape.i][shape.j] === 50 || board[shape.i][shape.j] === 51 || board[shape.i][shape.j] === 52 || board[shape.i][shape.j] === 53 )){
            b=true;
            Time_monster_hit();
        } else{
            board[shape.i][shape.j] = 10;    
        }
      
        var currentTime = new Date();
        time_elapsed = gameTime + gameTimeBonus - (currentTime - start_time) / 1000;
        if (score >= 20 && time_elapsed <= 10) {
            pac_color = "green";
        }
        if ((number_of_eating === balls_number || time_elapsed<=0)) {
            //gameOver = true;
            window.clearInterval(interval);
            playSound.stop();
            if(score<150 && remain_life >= 0){
                lostSound.play();
                window.alert("You can do better");
                window.clearInterval(interval);
                window.clearInterval(interval_monsters);
                window.clearInterval(interval_time_monster);
                lostSound.stop();
            }
            else{
                winSound.play();
                window.alert("We have a Winner!!!");    
                window.clearInterval(interval);
                window.clearInterval(interval_monsters);
                window.clearInterval(interval_time_monster);

                winSound.stop();
            }
            endSound.stop();
        }
        else if(!gameOver && remain_life==0){
            Draw();
            gameOver = true;
            playSound.stop();
            lostSound.play();        
            window.alert("You Lost!");   
            window.clearInterval(interval);
            window.clearInterval(interval_monsters);
            window.clearInterval(interval_time_monster);
        else if(remain_life==0){
            window.clearInterval(interval);
            playSound.stop();
            lostSound.play();        
            window.alert("You Lost!");   
            lostSound.stop(); 
        }
        else {
            Draw();
        }
    }

    function updateUp() {
        $(document).keydown(function(event){
            
            $(document).unbind()
        });
    }
    function updateDown() {
        $(document).keydown(function(event){
            c_down = event.key;
            $(document).unbind()
        });
    }
    function updateRight() {
        $(document).keydown(function(event){
            c_right = event.key;
            $(document).unbind()
        });
    }
    function updateLeft() {
        $(document).keydown(function(event){
            c_left = event.key;
            $(document).unbind()
        });
    }

    function new_game() {
        //clear monster and regular intervals
        window.clearInterval(interval);
        window.clearInterval(interval_monsters);
        window.clearInterval(interval_time_monster);
        //stop all sounds.
        playSound.stop();
        winSound.stop();
        lostSound.stop();
        //start new game
        remain_life=3;
        gameTimeBonus=0;
        count_of_monsters_fast=1000;
        Start();
    }

    function monsterHit(){
        score-=10;
        board[shape.i][shape.j]=12;
        remain_life--;
        Draw();
        var emptyCell = findRandomEmptyCell(board);
        board[emptyCell[0]][emptyCell[1]] = 10;
        Draw();
    }

    window.addEventListener("keydown", function(e) {
    // space and arrow keys
    if([32, 37, 38, 39, 40].indexOf(e.keyCode) > -1) {
        e.preventDefault();
    }
    }, false);
    
    function changeLocationOfTimeMonster(){
        var moved = false;
        var lastLocation_i=time_monster.i;
        var lastLocation_j=time_monster.j;
        var randomNum = Math.random();
        if(randomNum<=0.25 && time_monster.i>0 && board[time_monster.i-1][time_monster.j]!=4 && board[time_monster.i-1][time_monster.j]<12){
            time_monster.i--;
            moved = true;
        }
        else if(randomNum>0.25 && randomNum<=0.50 && time_monster.i<9 && board[time_monster.i+1][time_monster.j]!=4 && board[time_monster.i+1][time_monster.j]<12){
            time_monster.i++;
            moved = true;
        }
        else if(randomNum>=0.5 && randomNum<=0.75 && time_monster.j>0 && board[time_monster.i][time_monster.j-1]!=4 && board[time_monster.i][time_monster.j-1]<12){
            time_monster.j--;
            moved = true;
        }
        else if(randomNum>= 0.75 && time_monster.j<0  && board[time_monster.i][time_monster.j+1]!=4 && board[time_monster.i][time_monster.j+1]<12){
            time_monster.j++;
            moved = true;
        }
        if(moved==true){
            board[lastLocation_i][lastLocation_j]-=50;
            board[time_monster.i][time_monster.j]+=50;
        }
    }

    function ChangeLocationsOfMonsters(){
        activeMonsters.forEach(function(monster) {
            var distance_minimum = 10000;
            var chosen_i = monster.i;
            var chosen_j = monster.j;
            if(monster.j > 0 && board[monster.i][monster.j-1] != 4 && board[monster.i][monster.j-1]<50){
                var distanceUp =  Math.sqrt( Math.pow(monster.i-shape.i,2) + Math.pow(monster.j-1-shape.j,2));
                if(distanceUp < distance_minimum){
                    distance_minimum = distanceUp;
                    chosen_i=monster.i;
                    chosen_j=monster.j-1;
                }
            } 
            if(monster.j < 9 && board[monster.i][monster.j+1]!=4 && board[monster.i][monster.j+1] < 50){
                var distanceDown =  Math.sqrt( Math.pow(monster.i-shape.i,2) + Math.pow(monster.j+1-shape.j,2));
                if(distanceDown < distance_minimum){
                    distance_minimum = distanceDown;
                    chosen_i=monster.i;
                    chosen_j=monster.j+1;
                }
            }
            if(monster.i > 0 && board[monster.i-1][monster.j]!=4 && board[monster.i-1][monster.j] < 50){
                var distanceLeft =  Math.sqrt( Math.pow(monster.i-1-shape.i,2) + Math.pow(monster.j-shape.j,2));
                if(distanceLeft < distance_minimum){
                    distance_minimum = distanceLeft;
                    chosen_i=monster.i-1;
                    chosen_j=monster.j;
                }
            }
            if(monster.i < 9 && board[monster.i+1][monster.j]!=4 && board[monster.i+1][monster.j] < 50){
                var distanceRight =  Math.sqrt( Math.pow(monster.i+1-shape.i,2) + Math.pow(monster.j-shape.j,2));
                if(distanceRight < distance_minimum){
                    distance_minimum = distanceRight;
                    chosen_i=monster.i+1;
                    chosen_j=monster.j;
                }
            }
            board[monster.i][monster.j]-=12;
            board[chosen_i][chosen_j]+=12;
            monster.i=chosen_i;
            monster.j=chosen_j;
            // if(board[monster.i][monster.j] === board[shape.i][shape.j]){
            //     monsterHit();
            // }
        });
    }



    //get the modal dialog of ("about")
    var dialog = document.getElementById('about');
    //close the about dialog when click outside of it with the mouse
    dialog.addEventListener('click', function (event) {
        var rect = dialog.getBoundingClientRect();
        var isInDialog=(rect.top <= event.clientY && event.clientY <= rect.top + rect.height
        && rect.left <= event.clientX && event.clientX <= rect.left + rect.width);
        if (!isInDialog) {
            dialog.close();
        }
    });

    function stopAllSounds(){
            playSound.stop();;
            winSound.stop();
            lostSound.stop();
    }

    function faster_monsters(){
        window.clearInterval(interval_monsters);
        interval_monsters = setInterval(ChangeLocationsOfMonsters, (count_of_monsters_fast));
        count_of_monsters_fast = count_of_monsters_fast*0.9;
    }

    function Time_monster_hit(){
        gameTimeBonus = 50;
        window.clearInterval(interval_time_monster);
        board[shape.i][shape.j]=12;
    }
</script>
</body>

</html>
   